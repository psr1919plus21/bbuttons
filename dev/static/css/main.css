/* normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
html {
  font-family: sans-serif /* 1 */;
  -ms-text-size-adjust: 100% /* 2 */;
  -webkit-text-size-adjust: 100% /* 2 */;
}
body {
  margin: 0;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
progress,
video {
  display: inline-block /* 1 */;
  vertical-align: baseline /* 2 */;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden],
template {
  display: none;
}
a {
  background-color: transparent;
}
a:active,
a:hover {
  outline: 0;
}
abbr[title] {
  border-bottom: 1px dotted;
}
b,
strong {
  font-weight: bold;
}
dfn {
  font-style: italic;
}
mark {
  background: #ff0;
  color: #000;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
img {
  border: 0;
}
svg:not(:root) {
  overflow: hidden;
}
figure {
  margin: 0;
}
hr {
  box-sizing: content-box;
  height: 0;
}
pre {
  overflow: auto;
}
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}
button,
input,
optgroup,
select,
textarea {
  color: inherit /* 1 */;
  font: inherit /* 2 */;
  margin: 0 /* 3 */;
}
fieldset {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}
button {
  overflow: visible;
}
button,
select {
  text-transform: none;
}
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button /* 2 */;
  cursor: pointer /* 3 */;
}
button[disabled],
html input[disabled] {
  cursor: default;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
input {
  line-height: normal;
}
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box /* 1 */;
  padding: 0 /* 2 */;
}
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
input[type="search"] {
  -webkit-appearance: textfield /* 1 */;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
legend {
  border: 0 /* 1 */;
  padding: 0 /* 2 */;
}
textarea {
  overflow: auto;
}
optgroup {
  font-weight: bold;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
td,
th {
  padding: 0;
}
blockquote {
  margin: 0;
}
html,
body {
  height: 100%;
}
.page__wrapper {
  min-height: 100%;
  margin-bottom: -50px;
}
* html .page__wrapper {
  height: 100%;
}
.page__buffer {
  height: 50px;
}
.header {
  background: #2d4262;
  padding: 0 20px;
  text-align: center;
}
.header_title {
  color: #fff;
  font-size: 62px;
  margin: 0;
  line-height: 160px;
}
.page__wrapper {
  background: #363237;
}
.content {
  padding: 60px 20px 0;
}
.content-list {
  list-style: none;
  text-align: center;
  -webkit-padding-start: 0;
}
.content-list_item {
  margin: 0;
}
.tag {
  color: #00fdff;
}
.class {
  color: #edf080;
}
.string {
  color: #f66;
}
.val {
  color: #00f900;
}
.bbutton-description {
  display: inline-block;
  width: 30%;
  vertical-align: top;
}
.title {
  color: #fff;
  font-size: 42px;
  text-transform: uppercase;
}
.btn-wrapper {
  display: inline-block;
  width: 60%;
}
.description {
  margin-bottom: 60px;
  margin-top: 20px;
}
.description_title {
  color: #f2f2f2;
  font-size: 28px;
  margin-bottom: 10px;
}
.description-list {
  background: #000;
  border: 1px solid #696969;
  border-radius: 4px;
  box-shadow: 0 1px 1px #666 inset;
  box-sizing: border-box;
  color: #f0f0f0;
  margin: 0 auto;
  padding: 20px;
  list-style: none;
  text-align: left;
}

/*# sourceMappingURL=data:application/json;base64, */
